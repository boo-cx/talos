name: Build custom Talos installer and boot media with custom System Extensions and customisations to platform config

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [installer, iso]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Prepare output directory
        run: mkdir -p _out/${{ matrix.variant }}

      - name: Load build variables
        run: |
          yq -o props '.' *.env >> $GITHUB_ENV

      - name: Set static extra kernel args, trim whitespace
        run: |
          EXTRA_KERNEL_ARGS="\
            --extra-kernel-arg net.ifnames=0 \
            --extra-kernel-arg ip=:::::eth0:off \
            --extra-kernel-arg ip=:::::eth1:off"
          echo "EXTRA_KERNEL_ARGS=$(echo $EXTRA_KERNEL_ARGS)" >> $GITHUB_ENV

      - name: Set platform-specific config, strip comments
        run: |
          PLATFORM_CONFIG=""
          if [ "${{ matrix.variant }}" = "iso" ]; then
            PLATFORM_CONFIG="--meta=0xa=$(grep -v '^#' ./platform/metal-edge.yaml | tr -d '\n')"
          elif [ "${{ matrix.variant }}" = "secureboot" ]; then
            PLATFORM_CONFIG="--meta=0xa=$(grep -v '^#' ./platform/metal-home.yaml | tr -d '\n')"
          fi
          echo "PLATFORM_CONFIG=$PLATFORM_CONFIG" >> $GITHUB_ENV

      - name: Read list of System Extensions
        run: |
          EXTENSIONS=""
          if [ -f ./extensions/system-extensions.yaml ]; then
            EXTENSIONS=$(yq -r '.systemExtensions[] | "--system-extension-image " + @sh' system-extensions.yaml | xargs)
          fi
          echo "EXTENSIONS=$EXTENSIONS" >> $GITHUB_ENV

      - name: Extract environment variables from ExtensionServiceConfig YAMLs to facilitate pre-install environment
        run: |
          EXTENSIONS_ENV=""
          for file in  ./extensions/*.yaml; do
            if [ -f "$file" ] && [ "$(yq -r '.kind' "$file")" = "ExtensionServiceConfig" ]; then
              while IFS= read -r line; do
                EXTENSIONS_ENV+="--extra-kernel-arg talos.environment=$line "
              done < <(yq -r '.environment[]?' "$file")
            fi
          done
          echo "EXTENSIONS_ENV=$EXTENSIONS_ENV" >> $GITHUB_ENV

      - name: "Build Talos image: ${{ matrix.variant }}"
        run: |
          if [ "${{ matrix.variant }}" != "installer" ]; then
            ARGS+=" $PLATFORM_CONFIG $EXTRA_KERNEL_ARGS $EXTENSIONS $EXTENSIONS_ENV"
          fi

          docker run --rm -t \
            -v /dev:/dev \
            -v $PWD/_out/${{ matrix.variant }}:/out \
            -v $PWD/_out:/secureboot:ro \
            ghcr.io/siderolabs/imager:$TALOS_VERSION \
            --arch $ARCH \
            --platform=metal \
            $ARGS
            ${{ matrix.variant }}

      - name: Upload Talos image artifact
        uses: actions/upload-artifact@v4
        with:
         name: ${{ matrix.variant }}
         path: _out/${{ matrix.variant }}

  release:
    needs: build
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest

    steps:
      - name: Download all image artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: Push installer image to GHCR
        if: matrix.variant == 'installer'
        run: |
          INSTALLER_FILE="_out/installer/installer-amd64.tar"
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/installer-amd64:${{ github.ref_name }}"

          go install github.com/google/go-containerregistry/cmd/crane@latest
          export PATH="$PATH:$(go env GOPATH)/bin"
          echo "${{ secrets.GITHUB_TOKEN }}" | crane auth login ghcr.io -u "${{ github.actor }}" --password-stdin
          crane push "$INSTALLER_FILE" "$IMAGE_NAME"

      - name: Push boot media to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_artifacts/**/*
          token: ${{ secrets.GITHUB_TOKEN }}
