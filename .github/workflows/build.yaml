name: Build custom Talos installer and boot media with custom System Extensions and customisations to platform config

on:
  workflow_dispatch:
  push:
    tags:
      - v'*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.build_variables.outputs.version }}
    strategy:
      matrix:
        variant: [installer, iso]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Prepare output directory
        run: mkdir -p _out/${{ matrix.variant }}

      - name: Load build variables
        id: build_variables
        run: |
          set -a
          source build.env
          set +a
          cat build.env >> $GITHUB_ENV
          echo "version=${TALOS_VERSION}" >> $GITHUB_OUTPUT

      - name: Set static extra kernel args, trim whitespace
        run: |
          EXTRA_KERNEL_ARGS="\
            --extra-kernel-arg net.ifnames=0 \
            --extra-kernel-arg ip=:::::eth0:off \
            --extra-kernel-arg ip=:::::eth1:off"
          echo "EXTRA_KERNEL_ARGS=$(echo $EXTRA_KERNEL_ARGS)" >> $GITHUB_ENV

      - name: Set platform-specific config, strip comments
        run: |
          PLATFORM_CONFIG=""
          if [ "${{ matrix.variant }}" = "iso" ]; then
            PLATFORM_CONFIG="--meta=0xa=$(grep -v '^#' ./platform/metal-edge.yaml | base64 -w0)"
          elif [ "${{ matrix.variant }}" = "secureboot" ]; then
            PLATFORM_CONFIG="--meta=0xa=$(grep -v '^#' ./platform/metal-home.yaml | base64 -w0)"
          fi
          echo "PLATFORM_CONFIG=$PLATFORM_CONFIG" >> $GITHUB_ENV

      - name: Read list of System Extensions
        run: |
          EXTENSIONS=""
          if [ -f ./extensions/system-extensions.yaml ]; then
            EXTENSIONS=$(yq -r '.systemExtensions[] | "--system-extension-image " + @sh' system-extensions.yaml | xargs)
          fi
          echo "EXTENSIONS=$EXTENSIONS" >> $GITHUB_ENV

      - name: Extract environment variables from ExtensionServiceConfig YAMLs to facilitate pre-install environment
        run: |
          EXTENSIONS_ENV=""
          for file in  ./extensions/*.yaml; do
            if [ -f "$file" ] && [ "$(yq -r '.kind' "$file")" = "ExtensionServiceConfig" ]; then
              while IFS= read -r line; do
                EXTENSIONS_ENV+="--extra-kernel-arg talos.environment=$line "
              done < <(yq -r '.environment[]?' "$file")
            fi
          done
          echo "EXTENSIONS_ENV=$EXTENSIONS_ENV" >> $GITHUB_ENV

      - name: "Build Talos image: ${{ matrix.variant }}"
        run: |
          VARIANT="${{ matrix.variant }}"
          if [ $VARIANT != "installer" ]; then
            ARGS+=" $PLATFORM_CONFIG $EXTRA_KERNEL_ARGS $EXTENSIONS $EXTENSIONS_ENV"
          fi

          docker run --rm -t \
            -v /dev:/dev \
            -v $PWD/_out/${{ matrix.variant }}:/out \
            -v $PWD/_out:/secureboot:ro \
            ghcr.io/siderolabs/imager:$TALOS_VERSION \
            --arch $ARCH \
            --platform=metal \
            $ARGS \
            ${{ matrix.variant }}

      - name: Upload Talos image artifact
        uses: actions/upload-artifact@v4
        with:
         name: ${{ matrix.variant }}
         path: _out/${{ matrix.variant }}

  release:
    needs: build
    if: github.ref_type == 'tag' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Load TALOS_VERSION from build outputs
        run: echo "TALOS_VERSION=${{ needs.build.outputs.version }}" >> $GITHUB_ENV

      - name: Checkout code if manually triggered
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Create or replace tag if triggered manually
        if: github.event_name == 'workflow_dispatch'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          set -euo pipefail
      
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
      
          git fetch --tags

          if git rev-parse "${TALOS_VERSION}" >/dev/null 2>&1; then
            echo "Tag ${TALOS_VERSION} already exists. Replacing..."
            git tag -d "${TALOS_VERSION}" || true
            git push origin ":refs/tags/${TALOS_VERSION}" || true
          else
            echo "Creating new tag ${TALOS_VERSION}"
          fi

          git tag -a "${TALOS_VERSION}" -m "Release ${TALOS_VERSION}"
          git push origin "${TALOS_VERSION}"

      - name: Download all image artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "${{ env.TALOS_VERSION }}"
          files: release_artifacts/**/*
          token: ${{ secrets.PAT_TOKEN }}
          overwrite_files: true

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}

      - name: Push separate installer image to GHCR for consumption by Talos upgrades
        run: |
          INSTALLER_FILE="release_artifacts/installer/installer-amd64.tar"
          IMAGE_NAME="ghcr.io/${{ github.actor }}/talos/installer-amd64:${TALOS_VERSION}"

          go install github.com/google/go-containerregistry/cmd/crane@latest
          export PATH="$PATH:$(go env GOPATH)/bin"
          crane push "$INSTALLER_FILE" "$IMAGE_NAME"
