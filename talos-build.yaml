name: Build custom Talos installer and boot media with custom System Extensions

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [installer, iso]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Prepare output directory
        run: mkdir -p _out/${{ matrix.variant }}

      - name: Load configuration variables
        run: |
          while IFS='=' read -r key value; do
            echo "${key}=${value}" >> $GITHUB_ENV
          done < *.env        

      - name: "Build Talos image: ${{ matrix.variant }}"
        run: |
          if [ "${{ matrix.variant }}" = "iso" ]; then
            # ISO should be built for edge node only, and requires static network addressing
            PLATFORM_CONFIG="--meta=0xa=$(cat ./platform/metal-edge.yaml)"
          elif [ "${{ matrix.variant }}" = "secureboot" ]; then
            # Other nodes require DNS and NTP set only
            PLATFORM_CONFIG="--meta=0xa=$(cat ./platform/metal-home.yaml)"
          elif [ "${{ matrix.variant }}" = "installer" ]; then
            # "installer" target does not accept --meta argument
            :
          fi

          EXTENSIONS_ARGS=$(yq -r '.systemExtensions[] | "--system-extension-image " + @sh' system-extensions.yaml | xargs)

          docker run --rm -t \
            -v /dev:/dev \
            -v $PWD/_out/${{ matrix.variant }}:/out \
            -v $PWD/_out:/secureboot:ro \
            ghcr.io/siderolabs/imager:${{ env.TALOS_VERSION }} \
            --arch "${{ env.ARCH }}" \
            --extra-kernel-arg net.ifnames=0 \
            --extra-kernel-arg ip=:::::eth0:off \
            --extra-kernel-arg ip=:::::eth1:off \
            --extra-kernel-arg talos.environment=NODE_CIDR=${{ env.NODE_CIDR }} \
            --extra-kernel-arg talos.environment=POD_CIDR=${{ env.POD_CIDR }} \
            --extra-kernel-arg talos.environment=SERVICE_CIDR=${{ env.SERVICE_CIDR }} \
            --extra-kernel-arg talos.environment=REDIST_PREFIX=${{ env.REDIST_PREFIX }} \
            --extra-kernel-arg talos.environment=OSPF6_AREA=${{ env.OSPF6_AREA }} \
            --extra-kernel-arg talos.environment=AS_NUMBER=${{ env.AS_NUMBER }} \
            --platform=metal \
            ${PLATFORM_CONFIG+"$PLATFORM_CONFIG"} \
            $EXTENSIONS_ARGS
            ${{ matrix.variant }}

      - name: Push installer image to GHCR
        if: matrix.variant == 'installer'
        run: |
          INSTALLER_FILE="_out/installer/installer-amd64.tar"
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/installer-amd64:${{ env.TALOS_VERSION }}"

          # Install crane
          go install github.com/google/go-containerregistry/cmd/crane@latest
          export PATH="$PATH:$(go env GOPATH)/bin"

          # Authenticate with GHCR
          echo "${{ secrets.GITHUB_TOKEN }}" | crane auth login ghcr.io -u "${{ github.actor }}" --password-stdin

          # Push the Talos installer image
          crane push "$INSTALLER_FILE" "$IMAGE_NAME"

      - name: Upload Talos image artifact
        uses: actions/upload-artifact@v4
        with:
         name: ${{ matrix.variant }}
         path: _out/${{ matrix.variant }}

  release:
    needs: build
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest

    steps:
      - name: Download all image artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: Upload built images to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_artifacts/**/*
          token: ${{ secrets.GITHUB_TOKEN }}
